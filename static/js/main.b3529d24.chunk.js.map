{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/BMI.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","updateBmi","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","height","weight","heightToMeter","bmi","Math","pow","round","metricBMI","inches","heightToInches","parseInt","imperialBM","onChangeInput","e","target","prevState","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLowerCase","style","backgroundColor","bmiBackgroundColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3529d24.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst FormInput = (props) => {\n  const { name, type, title, value, onChange } = props\n  return (\n    <div className=\"input-groups\">\n      <span className=\"label\">{title}</span>\n      <div className=\"range-container\">\n        <input\n          type={type}\n          name={name}\n          className=\"range-input\"\n          value={value}\n          onChange={onChange}\n          autoComplete=\"false\"\n        />\n      </div>\n    </div>\n  )\n}\n\nFormInput.propTypes = {\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(['text', 'password', 'number']),\n}\n\nexport default FormInput\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport FormInput from './FormInput'\n\nconst BmiCalculator = (props) => {\n  const { updateBmi } = props\n  const [heightUnit, setHeightUnit] = useState('')\n  const [weightUnit, setWeightUnit] = useState('')\n  const [unit, setUnit] = useState('')\n  const [count, setCount] = useState({\n    heightCount: '0',\n    inchesCount: '0',\n    weightCount: '0',\n  })\n\n  const { heightCount, inchesCount, weightCount } = count\n\n  useEffect(() => {\n    switch (unit) {\n      case '':\n        setUnit('Metric')\n        break\n      case 'Metric':\n        setHeightUnit('cm')\n        setWeightUnit('kg')\n        break\n      case 'Imperial':\n        setHeightUnit('ft')\n        setWeightUnit('lbs')\n        break\n      default:\n        break\n    }\n  }, [unit])\n\n  const metricBMI = (height, weight) => {\n    if (height > 0 && weight > 0) {\n      const heightToMeter = height / 100\n      const bmi = weight / Math.pow(heightToMeter, 2)\n      updateBmi(Math.round(bmi))\n    }\n  }\n  const imperialBM = (height, weight, inches) => {\n    if (height > 0 && weight > 0 && inches > 0) {\n      // 12 inches make a foot\n      // convert feet to inches and add it to inches value\n      const heightToInches = height * 12 + parseInt(inches)\n      const bmi = 703 * (weight / (heightToInches * heightToInches))\n      updateBmi(Math.round(bmi))\n    }\n  }\n\n  useEffect(() => {\n    metricBMI(heightCount, weightCount)\n    imperialBM(heightCount, weightCount, inchesCount)\n    // eslint-disable-next-line\n  }, [heightCount, weightCount, inchesCount])\n\n  const onChangeInput = (e) => {\n    const { name, value } = e.target\n    setCount((prevState) => ({ ...prevState, [name]: value }))\n  }\n\n  const onSelectTag = (e) => {\n    const value = e.target.value\n    setUnit(value)\n  }\n\n  const onReset = (e) => {\n    e.preventDefault()\n    setUnit('Metric')\n    updateBmi(0)\n    setCount({\n      heightCount: '0',\n      inchesCount: '0',\n      weightCount: '0',\n    })\n  }\n\n  return (\n    <>\n      <div className=\"bmi-inputs\">\n        <div className=\"input-fields\">\n          <div>\n            <span className=\"label-unit\">Unit</span>\n            <div className=\"unit\">\n              <select\n                className=\"form-control form-control-sm\"\n                name=\"unit\"\n                value={unit}\n                onChange={onSelectTag}\n              >\n                <option value=\"Metric\">Metric</option>\n                <option value=\"Imperial\">Imperial</option>\n              </select>\n            </div>\n          </div>\n          <FormInput\n            type=\"text\"\n            name=\"heightCount\"\n            title={`Height (${heightUnit})`}\n            value={heightCount}\n            onChange={onChangeInput}\n          />\n          {unit === 'Imperial' && (\n            <FormInput\n              type=\"text\"\n              name=\"inchesCount\"\n              title={`Height (in)`}\n              value={inchesCount}\n              onChange={onChangeInput}\n            />\n          )}\n          <FormInput\n            type=\"text\"\n            name=\"weightCount\"\n            title={`Weight (${weightUnit})`}\n            value={weightCount}\n            onChange={onChangeInput}\n          />\n        </div>\n        <button className=\"button\" type=\"submit\" onClick={onReset}>\n          Reset\n        </button>\n      </div>\n    </>\n  )\n}\n\nBmiCalculator.propTypes = {\n  updateBmi: PropTypes.func.isRequired,\n}\n\nexport default BmiCalculator\n","import React, { useState } from 'react'\nimport BmiCalculator from './BmiCalculator'\n\nconst BMI = () => {\n  const [bmiValue, setBmiValue] = useState(0)\n\n  const getBmiClass = (bmi) => {\n    if (bmi >= 1 && bmi <= 18.5) return 'Underweight'\n    if (bmi > 18.5 && bmi <= 24.9) return 'Normal Weight'\n    if (bmi > 24.9 && bmi <= 29.9) return 'Overweight'\n    if (bmi >= 30) return 'Obese'\n  }\n\n  const bmiBackgroundColor = (bmi) => {\n    if (bmi >= 1 && bmi <= 18.5) return '#fed88b'\n    if (bmi > 18.5 && bmi <= 24.9) return '#80ff80'\n    if (bmi > 24.9 && bmi <= 29.9) return '#ff7f50'\n    if (bmi >= 30) return '#ff5411'\n  }\n\n  const bmiCategory = getBmiClass(bmiValue)\n\n  let bmiClass = ''\n  if (bmiValue > 0 && bmiCategory) {\n    bmiClass = bmiCategory.split(' ')[0].toLowerCase()\n  }\n\n  return (\n    <>\n      <div\n        className=\"calculator\"\n        style={{ backgroundColor: bmiBackgroundColor(bmiValue) }}\n      >\n        <h3>Body Mass Index Calculator</h3>\n        <div className=\"bmi-result-container\">\n          <div className=\"bmi-result\">\n            <div className=\"bmi-result-number\">\n              Body Mass Index (BMI) = {bmiValue}\n            </div>\n            <div className={`bmi-category ${bmiClass}`}>{bmiCategory}</div>\n          </div>\n        </div>\n        <BmiCalculator updateBmi={setBmiValue} />\n      </div>\n    </>\n  )\n}\n\nexport default BMI\n","import React from 'react'\nimport './App.css'\nimport BMI from './components/BMI'\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-6 col-lg-offset-3\">\n          <BMI />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}